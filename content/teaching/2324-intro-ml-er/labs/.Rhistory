install.packages("tree")
install.packages("rpart")
1+1
a=1
d = iris
require(tree)
tree(Species ~ ., d)
d = iris
require(tree)
tree(Species ~ ., d)
t = tree(Species~., d)
plot(t)
text(t)
t = tree(Species~., d)
plot(t)
#text(t)
t = tree(Species~., d)
plot(t)
text(t)
require(rpart)
rpart(Species~., d)
t = rpart(Species~., d)
plot(t)
text(t)
indexes.learning = sample(c(1:nrow(d)))[1:(nrow(d)*0.8)]
indexes.learning = sample(c(1:nrow(d)))[1:(nrow(d)*0.8)]
sample(10)
sample(c(1:nrow(d)))
sample(c(1:nrow(d)))[1:120]
indexes.learning = sample(c(1:nrow(d)))[1:(nrow(d)*0.8)]
t.species = tree(Species~., d[indexes.learning,])
plot(t.species)
text(t.species)
predicted.y = predict(t.species, d[-indexes.learning,], type="class")
predict(t.species, d[-indexes.learning,], type="class")
predicted.y = predict(t.species, d[-indexes.learning,], type="class")
length(which(predicted.y!=d$Species[-indexes.learning]))/length(predicted.y)
indexes.learning = sample(c(1:nrow(d)))[1:(nrow(d)*0.8)]
t.species = tree(Species~., d[indexes.learning,])
plot(t.species)
text(t.species)
predicted.y = predict(t.species, d[-indexes.learning,], type="class")
length(which(predicted.y!=d$Species[-indexes.learning]))/length(predicted.y)
table(predicted.y, d$Species[-indexes.learning])
conf.matrix = table(predicted.y, d$Species[-indexes.learning])
sum(diag(conf.matrix))/sum(conf.matrix)
error.species = 1-sum(diag(conf.matrix))/sum(conf.matrix)
error.species
computeErrorRate = function(categorical.y.name, data, learner, p.learn = 0.8, ...) {
indexes.learning = sample(c(1:nrow(data)))[1:(nrow(data)*p.learn)]
model = learner(formula(paste0(categorical.y.name,"~.")), data[indexes.learning,], ...)
predicted.y = predict(model, d[-indexes.learning, ], type="class")
length(which(predicted.y!=d[-indexes.learning, categorical.y.name]))/length(predicted.y)
}
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
print(computeErrorRate("Species", d, tree))
print(computeErrorRate("Species", d, rpart))
require(tidyverse)
ratio = seq(0.1, 0.99, 0.05)
error = ratio %>% map_dbl(function(r){computeErrorRate("Species", d, tree, r)})
tibble(ratio=ratio, error=error) %>% ggplot(aes(x=ratio,y=error))+geom_line()+ylim(0,1)
names(d)
t.sl = tree(Sepal.Length~., d[indexes.learning,])
predicted.y = predict(t.sl, d[-indexes.learning,], type="vector")
predicted.y
error.sl = mean(abs(predicted.y-d$Sepal.Length[-indexes.learning]))
error.sl
computeMAE = function(numerical.y.name, data, learner, p.learn = 0.8, ...) {
indexes.learning = sample(c(1:nrow(data)))[1:(nrow(data)*p.learn)]
model = learner(formula(paste0(numerical.y.name,"~.")), data[indexes.learning,], ...)
predicted.y = predict(model, d[-indexes.learning, ], type="vector")
mean(abs(predicted.y-d[-indexes.learning, numerical.y.name]))
}
for (variable in names(d)) {
if (is.numeric(d[,variable])) {
error = computeMAE(variable, d, tree)
} else {
error = computeErrorRate(variable, d, tree)
}
cat(paste(variable, error, "\n"))
}
t=tree(Species~., d)
plot(t)
text(t)
t=tree(Species~., d, mindev=0, minsize=2)
plot(t)
text(t)
nrow(tree(Species~., d)$frame)
computeComplexityOfPerfectTree = function (y.name, data) {
t = tree(formula(paste0(y.name,"~.")), data, mindev=0, minsize=2)
nrow(t$frame)
}
computeComplexityOfPerfectTree("Species", d)
for (variable in names(d)) {
complexity = computeComplexityOfPerfectTree(variable, d)
cat(paste(variable, complexity, "\n"))
}
rpart(Sepal.Width~., d, type="class")
rpart(Sepal.Width~., d, method="class")
